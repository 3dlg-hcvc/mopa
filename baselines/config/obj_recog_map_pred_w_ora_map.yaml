VERBOSE: False
BASE_TASK_CONFIG_PATH: "multion/config/tasks/multion_1on_objrecog_ora_map.yaml"
TRAINER_NAME: "objrecog"
ENV_NAME: "NavRLEnv"
SIMULATOR_GPU_ID: 0
TORCH_GPU_ID: 0
VIDEO_OPTION: []
TENSORBOARD_DIR: "experiments/end_to_end/objrecogmap/w_ora_map/debug/eval_hm3d_tb"
RESULTS_DIR: "experiments/end_to_end/objrecogmap/w_ora_map/debug/results"
VIDEO_DIR: "experiments/end_to_end/objrecogmap/w_ora_map/debug/video_dir"
VIDEO_RENDER_ALL_INFO: True
TEST_EPISODE_COUNT: 20
EVAL_CKPT_PATH_DIR: "data/hm3d_ddppo_pointnav_baselines_v1/hm3d-depth/ckpt.60.pth"
NUM_ENVIRONMENTS: 2
SENSORS: ["RGB_SENSOR", "DEPTH_SENSOR", "SEMANTIC_SENSOR"]
CHECKPOINT_FOLDER: "experiments/end_to_end/objrecogmap/w_ora_map/debug/checkpoints"
LOG_FILE: "experiments/end_to_end/objrecogmap/w_ora_map/debug/eval_hm3d.log"
NUM_UPDATES: -1
TOTAL_NUM_STEPS: 2.5e9
LOG_INTERVAL: 10
#NUM_CHECKPOINTS: 100
CHECKPOINT_INTERVAL: 100
# Force PyTorch to be single threaded as
# this improves performance considerably
FORCE_TORCH_SINGLE_THREADED: True

EVAL:
  SPLIT: 'test'
  USE_CKPT_CONFIG: False

RL:
  NEW_REWARD_STRUCTURE: True
  SUCCESS_REWARD: 2.5

  MAP:
    map_size: 250
    map_depth: 4
    map_resolution: 0.2
    meters_covered: 50
    enc_output_size: 64
    
  POLICY:
    name: "ObjRecogResNetPolicy"
    EXPLORATION_STRATEGY: "random"  # can be one of ["random", "stubborn"]
    EXPLORE_RADIUS: 50
    MAX_STEPS_BEFORE_GOAL_SELECTION: 50
    global_map_size: 250
    USE_LOCAL_MAP_FOR_STUBBORN: True
    local_map_size: 15
    collision_threshold: 5
    has_rgb: False
    pred_labels: False # False is oracle map

  PPO:
    # ppo params
    clip_param: 0.2
    ppo_epoch: 2
    num_mini_batch: 2
    value_loss_coef: 0.5
    entropy_coef: 0.01
    lr: 2.5e-4
    eps: 1e-5
    max_grad_norm: 0.2
    num_steps: 32
    use_gae: True
    gamma: 0.99
    tau: 0.95
    use_linear_clip_decay: False
    use_linear_lr_decay: False
    reward_window_size: 50

    use_normalized_advantage: False

    hidden_size: 512

    # Use double buffered sampling, typically helps
    # when environment time is similar or large than
    # policy inference time during rollout generation
    use_double_buffered_sampler: False

  DDPPO:
    sync_frac: 0.6
    # The PyTorch distributed backend to use
    distrib_backend: NCCL
    # Visual encoder backbone
    pretrained_weights: data/ddppo-models/hm3d_ddppo_pointnav_baselines_v1/hm3d-depth/ckpt.60.pth
    # Initialize with pretrained weights
    pretrained: False
    # Initialize just the visual encoder backbone with pretrained weights
    pretrained_encoder: True
    # Whether or not the visual encoder backbone will be trained.
    train_encoder: False #True
    # Whether or not to reset the critic linear layer
    reset_critic: True

    # Model parameters
    backbone: resnet50
    rnn_type: LSTM
    num_recurrent_layers: 2
